// Concrete grammar of minilang
stmts =
	{stmts_0:} stmt
		{-> pop, New stmts_0/1} |
	{stmts_1:} stmts stmt
		{-> pop, pop, New stmts_1/2} ;
	// firsts:
	//   stmt::stmt_if=.'if' '(' cond ')' '{' stmts '}' else
	//   stmt::stmt_while=.'while' '(' cond ')' '{' stmts '}'
	//   stmt::stmt_print=.'print' '(' expr ')' ';'
	//   stmt::stmt_assign=.id '=' expr ';'
	// afters:
	//   stmt::stmt_if=.'if' '(' cond ')' '{' stmts '}' else
	//   stmt::stmt_while=.'while' '(' cond ')' '{' stmts '}'
	//   stmt::stmt_print=.'print' '(' expr ')' ';'
	//   stmt::stmt_assign=.id '=' expr ';'
	//   stmt::stmt_if= 'if' '(' cond ')' '{' stmts.'}' else
	//   stmt::stmt_while= 'while' '(' cond ')' '{' stmts.'}'
	//   else::else_elseif= 'else' 'if' '(' cond ')' '{' stmts.'}' else
	//   else::else_else= 'else' '{' stmts.'}'
	//   _start::Start= stmts.Eof
cond =
	{cond_eq:} expr '=' expr
		{-> pop, pop, pop, New cond_eq/3} |
	{cond_lt:} expr '<' expr
		{-> pop, pop, pop, New cond_lt/3} |
	{cond_gt:} expr '>' expr
		{-> pop, pop, pop, New cond_gt/3} ;
	// firsts:
	//   expr::expr_neg=.'-' expr
	//   expr_4::expr_par=.'(' expr ')'
	//   expr_4::expr_var=.id
	//   expr_4::expr_read=.'read'
	//   expr_4::expr_int=.int
	// afters:
	//   stmt::stmt_if= 'if' '(' cond.')' '{' stmts '}' else
	//   stmt::stmt_while= 'while' '(' cond.')' '{' stmts '}'
	//   else::else_elseif= 'else' 'if' '(' cond.')' '{' stmts '}' else
stmt =
	{stmt_if:} 'if' '(' cond ')' '{' stmts '}' else
		{-> pop, pop, pop, pop, pop, pop, pop, pop, New stmt_if/8} |
	{stmt_while:} 'while' '(' cond ')' '{' stmts '}'
		{-> pop, pop, pop, pop, pop, pop, pop, New stmt_while/7} |
	{stmt_print:} 'print' '(' expr ')' ';'
		{-> pop, pop, pop, pop, pop, New stmt_print/5} |
	{stmt_assign:} id '=' expr ';'
		{-> pop, pop, pop, pop, New stmt_assign/4} ;
	// firsts:
	//   stmt::stmt_if=.'if' '(' cond ')' '{' stmts '}' else
	//   stmt::stmt_while=.'while' '(' cond ')' '{' stmts '}'
	//   stmt::stmt_print=.'print' '(' expr ')' ';'
	//   stmt::stmt_assign=.id '=' expr ';'
	// afters:
	//   stmt::stmt_if=.'if' '(' cond ')' '{' stmts '}' else
	//   stmt::stmt_while=.'while' '(' cond ')' '{' stmts '}'
	//   stmt::stmt_print=.'print' '(' expr ')' ';'
	//   stmt::stmt_assign=.id '=' expr ';'
	//   stmt::stmt_if= 'if' '(' cond ')' '{' stmts.'}' else
	//   stmt::stmt_while= 'while' '(' cond ')' '{' stmts.'}'
	//   else::else_elseif= 'else' 'if' '(' cond ')' '{' stmts.'}' else
	//   else::else_else= 'else' '{' stmts.'}'
	//   _start::Start= stmts.Eof
else =
	{else_none:} 
		{-> New else_none/0} |
	{else_elseif:} 'else' 'if' '(' cond ')' '{' stmts '}' else
		{-> pop, pop, pop, pop, pop, pop, pop, pop, pop, New else_elseif/9} |
	{else_else:} 'else' '{' stmts '}'
		{-> pop, pop, pop, pop, New else_else/4} ;
	// is nullable
	// firsts:
	//   else::else_elseif=.'else' 'if' '(' cond ')' '{' stmts '}' else
	//   else::else_else=.'else' '{' stmts '}'
	// afters:
	//   stmt::stmt_if=.'if' '(' cond ')' '{' stmts '}' else
	//   stmt::stmt_while=.'while' '(' cond ')' '{' stmts '}'
	//   stmt::stmt_print=.'print' '(' expr ')' ';'
	//   stmt::stmt_assign=.id '=' expr ';'
	//   stmt::stmt_if= 'if' '(' cond ')' '{' stmts.'}' else
	//   stmt::stmt_while= 'while' '(' cond ')' '{' stmts.'}'
	//   else::else_elseif= 'else' 'if' '(' cond ')' '{' stmts.'}' else
	//   else::else_else= 'else' '{' stmts.'}'
	//   _start::Start= stmts.Eof
expr =
	{expr_neg:} '-' expr
		{-> pop, pop, New expr_neg/2} |
	{expr_1:} expr_2
		{-> pop} ;
	// firsts:
	//   expr::expr_neg=.'-' expr
	//   expr_4::expr_par=.'(' expr ')'
	//   expr_4::expr_var=.id
	//   expr_4::expr_read=.'read'
	//   expr_4::expr_int=.int
	// afters:
	//   cond::cond_eq= expr.'=' expr
	//   cond::cond_lt= expr.'<' expr
	//   cond::cond_gt= expr.'>' expr
	//   stmt::stmt_print= 'print' '(' expr.')' ';'
	//   stmt::stmt_assign= id '=' expr.';'
	//   expr_4::expr_par= '(' expr.')'
	//   stmt::stmt_if= 'if' '(' cond.')' '{' stmts '}' else
	//   stmt::stmt_while= 'while' '(' cond.')' '{' stmts '}'
	//   else::else_elseif= 'else' 'if' '(' cond.')' '{' stmts '}' else
expr_2 {-> expr}=
	{expr_mod:} expr_2 '%' expr_3
		{-> pop, pop, pop, New expr_mod/3} |
	{expr_mul:} expr_2 '*' expr_3
		{-> pop, pop, pop, New expr_mul/3} |
	{expr_div:} expr_2 '/' expr_3
		{-> pop, pop, pop, New expr_div/3} |
	{expr_2_3:} expr_3
		{-> pop} ;
	// firsts:
	//   expr_4::expr_par=.'(' expr ')'
	//   expr_4::expr_var=.id
	//   expr_4::expr_read=.'read'
	//   expr_4::expr_int=.int
	// afters:
	//   cond::cond_eq= expr.'=' expr
	//   cond::cond_lt= expr.'<' expr
	//   cond::cond_gt= expr.'>' expr
	//   stmt::stmt_print= 'print' '(' expr.')' ';'
	//   stmt::stmt_assign= id '=' expr.';'
	//   expr_2::expr_mod= expr_2.'%' expr_3
	//   expr_2::expr_mul= expr_2.'*' expr_3
	//   expr_2::expr_div= expr_2.'/' expr_3
	//   expr_4::expr_par= '(' expr.')'
	//   stmt::stmt_if= 'if' '(' cond.')' '{' stmts '}' else
	//   stmt::stmt_while= 'while' '(' cond.')' '{' stmts '}'
	//   else::else_elseif= 'else' 'if' '(' cond.')' '{' stmts '}' else
expr_3 {-> expr}=
	{expr_add:} expr_3 '+' expr_4
		{-> pop, pop, pop, New expr_add/3} |
	{expr_sub:} expr_3 '-' expr_4
		{-> pop, pop, pop, New expr_sub/3} |
	{expr_3_2:} expr_4
		{-> pop} ;
	// firsts:
	//   expr_4::expr_par=.'(' expr ')'
	//   expr_4::expr_var=.id
	//   expr_4::expr_read=.'read'
	//   expr_4::expr_int=.int
	// afters:
	//   cond::cond_eq= expr.'=' expr
	//   cond::cond_lt= expr.'<' expr
	//   cond::cond_gt= expr.'>' expr
	//   stmt::stmt_print= 'print' '(' expr.')' ';'
	//   stmt::stmt_assign= id '=' expr.';'
	//   expr_2::expr_mod= expr_2.'%' expr_3
	//   expr_2::expr_mul= expr_2.'*' expr_3
	//   expr_2::expr_div= expr_2.'/' expr_3
	//   expr_3::expr_add= expr_3.'+' expr_4
	//   expr_3::expr_sub= expr_3.'-' expr_4
	//   expr_4::expr_par= '(' expr.')'
	//   stmt::stmt_if= 'if' '(' cond.')' '{' stmts '}' else
	//   stmt::stmt_while= 'while' '(' cond.')' '{' stmts '}'
	//   else::else_elseif= 'else' 'if' '(' cond.')' '{' stmts '}' else
expr_4 {-> expr}=
	{expr_par:} '(' expr ')'
		{-> pop, pop, pop, New expr_par/3} |
	{expr_var:} id
		{-> pop, New expr_var/1} |
	{expr_read:} 'read'
		{-> pop, New expr_read/1} |
	{expr_int:} int
		{-> pop, New expr_int/1} ;
	// firsts:
	//   expr_4::expr_par=.'(' expr ')'
	//   expr_4::expr_var=.id
	//   expr_4::expr_read=.'read'
	//   expr_4::expr_int=.int
	// afters:
	//   cond::cond_eq= expr.'=' expr
	//   cond::cond_lt= expr.'<' expr
	//   cond::cond_gt= expr.'>' expr
	//   stmt::stmt_print= 'print' '(' expr.')' ';'
	//   stmt::stmt_assign= id '=' expr.';'
	//   expr_2::expr_mod= expr_2.'%' expr_3
	//   expr_2::expr_mul= expr_2.'*' expr_3
	//   expr_2::expr_div= expr_2.'/' expr_3
	//   expr_3::expr_add= expr_3.'+' expr_4
	//   expr_3::expr_sub= expr_3.'-' expr_4
	//   expr_4::expr_par= '(' expr.')'
	//   stmt::stmt_if= 'if' '(' cond.')' '{' stmts '}' else
	//   stmt::stmt_while= 'while' '(' cond.')' '{' stmts '}'
	//   else::else_elseif= 'else' 'if' '(' cond.')' '{' stmts '}' else
_start =
	{Start:} stmts Eof
		{-> pop, pop, New Start/2} ;
	// firsts:
	//   stmt::stmt_if=.'if' '(' cond ')' '{' stmts '}' else
	//   stmt::stmt_while=.'while' '(' cond ')' '{' stmts '}'
	//   stmt::stmt_print=.'print' '(' expr ')' ';'
	//   stmt::stmt_assign=.id '=' expr ';'
